{"version":3,"file":"static/webpack/static/development/pages/index.js.5f06804bc5406ac3658b.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport fetch from 'isomorphic-unfetch'\nimport cheerio from 'cheerio'\nimport Meta from '../components/meta'\nconst url = 'https://www.gurufocus.com/term/peg/AAPL/PEG-Ratio'\nvar proxyUrl = 'https://cors-anywhere.herokuapp.com/'\nimport { Line } from 'react-chartjs-2'\n\n// https://www.alphavantage.co/documentation/\n// alpha vantage api key KT28GNBJ2ECP4SJ1\n\n// https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=BA&apikey=KT28GNBJ2ECP4SJ1\n\n\nconst chartData = {\n  labels: [],\n  datasets: [\n    {\n       label: 'Apple',\n       fill: false,\n       lineTension: 0.1,\n       backgroundColor: 'rgba(75,192,192,0.4)',\n       borderColor: 'rgba(75,192,192,1)',\n       borderCapStyle: 'butt',\n       borderDash: [],\n       borderDashOffset: 0.0,\n       borderJoinStyle: 'miter',\n       pointBorderColor: 'rgba(75,192,192,1)',\n       pointBackgroundColor: '#fff',\n       pointBorderWidth: 1,\n       pointHoverRadius: 5,\n       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n       pointHoverBorderColor: 'rgba(220,220,220,1)',\n       pointHoverBorderWidth: 2,\n       pointRadius: 1,\n       pointHitRadius: 10,\n       data: [],\n     },\n     {\n       label: 'Microsoft',\n       fill: false,\n       lineTension: 0.1,\n       backgroundColor: 'rgba(75,192,192,0.4)',\n       borderColor: 'rgba(75,192,192,1)',\n       borderCapStyle: 'butt',\n       borderDash: [],\n       borderDashOffset: 0.0,\n       borderJoinStyle: 'miter',\n       pointBorderColor: 'rgba(75,192,192,1)',\n       pointBackgroundColor: '#fff',\n       pointBorderWidth: 1,\n       pointHoverRadius: 5,\n       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n       pointHoverBorderColor: 'rgba(220,220,220,1)',\n       pointHoverBorderWidth: 2,\n       pointRadius: 1,\n       pointHitRadius: 10,\n       data: [],\n     },\n     {\n       label: 'Microsoft',\n       fill: false,\n       lineTension: 0.1,\n       backgroundColor: 'rgba(75,192,192,0.4)',\n       borderColor: 'rgba(75,192,192,1)',\n       borderCapStyle: 'butt',\n       borderDash: [],\n       borderDashOffset: 0.0,\n       borderJoinStyle: 'miter',\n       pointBorderColor: 'rgba(75,192,192,1)',\n       pointBackgroundColor: '#fff',\n       pointBorderWidth: 1,\n       pointHoverRadius: 5,\n       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n       pointHoverBorderColor: 'rgba(220,220,220,1)',\n       pointHoverBorderWidth: 2,\n       pointRadius: 1,\n       pointHitRadius: 10,\n       data: [],\n   },\n   {\n     label: 'Microsoft',\n     fill: false,\n     lineTension: 0.1,\n     backgroundColor: 'rgba(75,192,192,0.4)',\n     borderColor: 'rgba(75,192,192,1)',\n     borderCapStyle: 'butt',\n     borderDash: [],\n     borderDashOffset: 0.0,\n     borderJoinStyle: 'miter',\n     pointBorderColor: 'rgba(75,192,192,1)',\n     pointBackgroundColor: '#fff',\n     pointBorderWidth: 1,\n     pointHoverRadius: 5,\n     pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n     pointHoverBorderColor: 'rgba(220,220,220,1)',\n     pointHoverBorderWidth: 2,\n     pointRadius: 1,\n     pointHitRadius: 10,\n     data: [],\n  }\n  ],\n}\n\nconst chartOptions = {\n  maintainAspectRatio: false,\n  elements: {\n    line: {\n      tension: 0.1,\n    },\n  },\n  legend: {\n    display: true,\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {\n        display: false,\n      },\n    }],\n    yAxes: [{\n      ticks: {\n        maxTicksLimit: 5,\n        beginAtZero: true,\n      },\n    }],\n  },\n  tooltips: {\n    callbacks: {},\n  },\n}\n\n\n\nconst HeroTitle = styled.h1`\n  color:red;\n  position: relative;\n  z-index: 1;\n  text-transform: uppercase;\n  font-size: 100px;\n  margin-bottom: -10px;\n  font-family: 'Anton', sans-serif;\n  text-shadow: -3px 0px 11px rgba(0,0,0,0.7);\n`\n\nconst OuterContainer = styled.div`\n  background: #f5f5f5;\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  max-width: 1200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 20px;\n`\n\nconst InnerContainer = styled.div`\n  padding: 20px;\n`\n\nconst Tr = styled.tr`\n  font-family: 'Roboto', sans-serif;\n  text-align: left;\n  padding: 10px;\n`\n\nconst ThR = styled.th`\n  text-align: right;\n  padding: 10px;\n`\n\nclass Index extends Component {\n  state = {\n    stocks: {},\n    symbolList: []\n  }\n\n  componentWillMount() {\n    // ( async () => {\n    //   const res = await fetch('https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl,msft&types=quote,stats,financials,company,earnings,chart&range=3m')\n    //   const data = await res.json()\n    //   const stocks = []\n    //   const array = Object.keys( data ).map( d => stocks.push( data[d] ))\n    //   this.setState({ stocks })\n    //   this.buildChartData( stocks )\n    // })()\n\n    fetch( proxyUrl + url )\n      .then( res => res.text() )\n      .then( (body ) => {\n        // comp_name\n        const test = cheerio.load(body)\n        //console.log(test('.comp_name font').text(), 'the test')\n\n        // test('.comp_name font').each(( index, element ) => {\n        //   console.log(element, 'the index')\n        // })\n      })\n  }\n\n  buildChartData = stocks => {\n    const labels = []\n    stocks[0].chart.map( c => labels.push( c.date ))\n    chartData.labels = labels\n    stocks.map(( s, i ) => {\n      const data = []\n      s.chart.map( c => data.push( c.close ))\n      chartData.datasets[i].data = data\n    })\n    this.setState({ chartData, chartOptions })\n  }\n\n  calculateDebtToEquity = stock => {\n    const shareholderEquity = stock.financials.financials[0].shareholderEquity\n    const totalDebt = stock.financials.financials[0].totalDebt\n    const debtToEquity = ( totalDebt / shareholderEquity ).toFixed( 2 )\n    return debtToEquity\n  }\n\n  calculateAssetTurnover = stock => {\n    const totalAssetsThisQuarter = stock.financials.financials[0].totalAssets\n    const totalAssetsLastQuarter = stock.financials.financials[1].totalAssets\n\n    const averageTotalAssets = ( totalAssetsThisQuarter + totalAssetsLastQuarter ) / 2\n    const assetTurnover = stock.financials.financials[0].totalRevenue / averageTotalAssets\n    return assetTurnover.toFixed( 2 )\n  }\n\n  calculatePayoutRatio = stock => {\n    const EPS = stock.earnings.earnings.reduce(( accumulator, currentValue ) => accumulator + currentValue.actualEPS, 0 )\n    const dividendRate = stock.stats.dividendRate\n\n    const payoutRatio = Math.floor( ( ( dividendRate / EPS ) * 100 ) * 100 ) / 100\n\n    return payoutRatio\n  }\n\n  setSymbol = ( index, event ) => {\n    ( async () => {\n      const text = event.target.value\n\n      const symbolList = [...this.state.symbolList]\n      symbolList[index] = text\n      this.setState({ symbolList })\n      // const res = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${ text }&apikey=KT28GNBJ2ECP4SJ1`)\n      // const data = await res.json()\n      //console.log(data, 'the data from search')\n    })()\n  }\n\n  submit = () => {\n    ( async () => {\n      const { symbolList } = this.state\n      if ( symbolList.length > 0 ) {\n        const removeFromList = [undefined, null]\n        const filteredList = symbolList.filter( i => !removeFromList.includes( i ))\n        this.setState({ symbolList: filteredList })\n\n        const res = await fetch(`https://api.iextrading.com/1.0/stock/market/batch?symbols=${ filteredList.join(\",\")}&types=quote,stats,financials,company,earnings,chart&range=3m`)\n        const data = await res.json()\n        console.log(data, 'the data in submit')\n        const stocks = []\n        const array = Object.keys( data ).map( d => stocks.push( data[d] ))\n        this.setState({ stocks })\n        this.buildChartData( stocks )\n      }\n    })()\n  }\n\n  renderInputFields = () => {\n    return Array.from(new Array( 5 ), (val, i ) => {\n      return (\n        <th key={ i }>\n          <input type=\"text\" placeholder=\"Enter stock symbol\" value={ this.state.symbolList[i] || '' } onChange={ e => this.setSymbol( i, e )}/>\n        </th>\n      )\n    })\n  }\n\n  render() {\n    const {\n      stocks,\n      chartData,\n      chartOptions,\n    } = this.state\n\n    const tableHeaders = [\n      'Name',\n      'PEG',//\n      'Price To Earning (P/E)',\n      'Price to Sales (P/S)',\n      'Price to Book (P/B)',\n      'Dividend Yield',\n      'Dividend Payout',\n      'Return On Assets',\n      'Return On Equity',\n      'Profit Margin',\n      'Current Ratio', //\n      'Quick Ratio', //\n      'Debt to Equity',\n      'Interest Coverage',//\n      'Asset Turnover',//\n      'Inventory Turnover',//\n    ]\n    // still need: PEG, current ratio, quick ratio, intereset coverage, asset turnover, inventory turnover\n\n    return (\n      <OuterContainer>\n        <Meta />\n        <InnerContainer>\n          <table>\n            <tbody>\n              <Tr>\n                <th> Stock Symbol </th>\n                { this.renderInputFields() }\n                <button onClick={ () => this.submit() }> Go </button>\n              </Tr>\n              <Tr>\n                <th> Name </th>\n                { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.company.companyName }</th> ) }\n              </Tr>\n              <Tr>\n                <th> Sector </th>\n                { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.company.sector }</th> ) }\n              </Tr>\n              <Tr>\n                <th> Industry </th>\n                { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.company.industry }</th> ) }\n              </Tr>\n              <Tr>\n                <th> Latest Price </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>${ s.quote.latestPrice }</ThR> ) }\n              </Tr>\n              <Tr>\n                <th> Price to Earning (P/E) </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.quote.peRatio }</ThR> ) }\n              </Tr>\n              <Tr>\n                <th> Price to Sales (P/S) </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.stats.priceToSales.toFixed( 2 ) }</ThR> ) }\n              </Tr>\n              <Tr>\n                <th> Price to Book (P/B) </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.stats.priceToBook }</ThR> ) }\n              </Tr>\n              <Tr>\n                <th> Dividend Yield </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.stats.dividendYield.toFixed( 2 ) }%</ThR> ) }\n              </Tr>\n              <Tr>\n                <th> Dividend Rate </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>${ s.stats.dividendRate.toFixed( 2 ) }</ThR> ) }\n                {/* THis is the amount receieved per year per stock (paid out quarterly)*/}\n              </Tr>\n              <Tr>\n                <th> Dividend Payout Ratio </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ this.calculatePayoutRatio( s )}%</ThR> ) }\n                {/* search company payout ratio */}\n              </Tr>\n              <Tr>\n                <th> Return On Assets </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.stats.returnOnAssets }%</ThR> ) }\n                {/* search company payout ratio */}\n              </Tr>\n              <Tr>\n                <th> Return On Equity </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.stats.returnOnEquity }%</ThR> ) }\n                {/* search company payout ratio */}\n              </Tr>\n              <Tr>\n                <th> Profit Margin </th>\n                { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ s.stats.profitMargin }%</ThR> ) }\n                {/* search company payout ratio */}\n              </Tr>\n              <Tr>\n                <th> Debt to Equity </th>\n                  { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ this.calculateDebtToEquity( s )}%</ThR> ) }\n                {/* search company payout ratio */}\n              </Tr>\n              <Tr>\n                <th> Asset Turnover (Current Quarter)</th>\n                  { stocks.length && stocks.map( s => <ThR key={ s.company.companyName }>{ this.calculateAssetTurnover( s )}%</ThR> ) }\n                {/* search company payout ratio */}\n              </Tr>\n            </tbody>\n          </table>\n          <div style={{ height: '500px', width: '800px'}}>\n            <Line data={ chartData } options={ chartOptions } redraw={ true }/>\n          </div>\n        </InnerContainer>\n      </OuterContainer>\n    )\n  }\n}\n\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAlEA;AA0FA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAFA;AADA;AANA;AAaA;AACA;AADA;AAvBA;AA8BA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAIA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AA2BA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AACA;AADA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;AArGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAigOA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}