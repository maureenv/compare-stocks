{"version":3,"file":"static/webpack/static/development/pages/index.js.d570541513d2bb673b2d.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport fetch from 'isomorphic-unfetch'\nimport cheerio from 'cheerio'\nimport Meta from '../components/meta'\nconst url = 'https://www.gurufocus.com/term/peg/AAPL/PEG-Ratio'\nvar proxyUrl = 'https://cors-anywhere.herokuapp.com/'\nimport { Line } from 'react-chartjs-2'\nimport Select from 'react-select'\n// https://codepen.io/anon/pen/gQBGdR FIXED HEADER\n// https://github.com/jerairrest/react-chartjs-2/issues/81 create custom legend?\n// https://github.com/chartjs/Chart.js/issues/3150 show hide bar lines on custom click\n\nconst chartData = {\n  labels: [],\n  datasets: [],\n}\n\nconst chartOptions = {\n  maintainAspectRatio: false,\n  elements: {\n    line: {\n      tension: 0.1,\n    },\n  },\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {\n        display: false,\n      },\n    }],\n    yAxes: [{\n      ticks: {\n        maxTicksLimit: 5,\n        beginAtZero: true,\n      },\n    }],\n  },\n  tooltips: {\n    callbacks: {},\n  },\n}\n\nconst chartColors = ['#0d60bb', '#01a8d2', '#1dc7a3', '#0db106']\n\nconst ChartContainer = styled.div`\n  height: 500px;\n  width: 100%;\n  margin-top: 50px;\n`\n\nconst HeroTitle = styled.h1`\n  color:red;\n  position: relative;\n  z-index: 1;\n  text-transform: uppercase;\n  font-size: 100px;\n  margin-bottom: -10px;\n  font-family: 'Anton', sans-serif;\n  text-shadow: -3px 0px 11px rgba(0,0,0,0.7);\n`\n\nconst Table = styled.table`\n\n`\n\nconst Tbody = styled.tbody`\nborder-bottom: 1px solid gray;\n`\n\nconst OuterContainer = styled.div`\n  background: #f5f5f5;\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  max-width: 1200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 20px;\n`\n\nconst InnerContainer = styled.div`\n  padding: 20px;\n  width: 100%;\n  max-width: 1000px;\n`\n\nconst Tr = styled.tr`\n  font-family: 'Roboto', sans-serif;\n  text-align: left;\n  position: ${ props => props.fixed && 'fixed' };\n  border-bottom:  ${ props => !props.fixed && '1px solid #d6d6d6'};\n`\n\nconst Th = styled.th`\n  text-align: ${ props => props.left ? 'left' : 'right'};\n  padding: 10px 20px;\n  font-size: 13px;\n`\n\nconst SelectStyles = styled.div`\n  .Select-control {\n    width: 200px;\n  }\n`\n\nconst Bullet = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 10px;\n  margin-right: 8px;\n  background-color: ${ props => props.color };\n`\n\nconst LegendName = styled.p`\n  font-size: 13px;\n  font-family: 'Roboto', sans-serif;\n`\n\nconst LegendItemContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0 20px;\n`\n\nconst ChartLegend = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Dropdown = styled.div`\n  position: absolute;\n  background: #fff;\n  width: 230px;\n  padding: 15px 0;\n  border-radius: 4px;\n  .match {\n    transition: all 0.2s ease-in-out;\n    font-size: 13px;\n    padding: 10px 15px;\n    border-bottom: 1px solid #d6d6d6;\n    display: flex;\n    justify-content: space-between;\n    &:last-child {\n      border-bottom: 0;\n    }\n    &:hover {\n      background: #d6d6d6;\n      cursor: pointer;\n    }\n  }\n  .symbol {\n    font-weight: 500;\n  }\n  .company-name {\n    max-width: 150px;\n    text-align: right;\n    line-height: 1.3;\n    color: #767676;\n  }\n`\n\nconst DropdownContainer = styled.div`\n  position: relative;\n  .input {\n    font-size: 13px;\n  }\n`\n\nclass Index extends Component {\n  state = {\n    stocks: {},\n    symbolList: [],\n  }\n\n  componentWillMount() {\n    // ( async () => {\n    //   const res = await fetch('https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl,msft&types=quote,stats,financials,company,earnings,chart&range=3m')\n    //   const data = await res.json()\n    //   const stocks = []\n    //   const array = Object.keys( data ).map( d => stocks.push( data[d] ))\n    //   this.setState({ stocks })\n    //   this.buildChartData( stocks )\n    // })()\n\n    fetch( proxyUrl + url )\n      .then( res => res.text() )\n      .then( (body ) => {\n        // comp_name\n        const test = cheerio.load(body)\n        //console.log(test('.comp_name font').text(), 'the test')\n\n        // test('.comp_name font').each(( index, element ) => {\n        //   console.log(element, 'the index')\n        // })\n      })\n  }\n\nchartData = canvas => {\n    const { stocks } = this.state\n    if ( stocks.length ) {\n      chartData.datasets = []\n      const labels = []\n      stocks[0].chart.map( c => labels.push( c.date ))\n      chartData.labels = labels\n      const ctx = canvas.getContext(\"2d\")\n\t\t  const gradient = ctx.createLinearGradient(0,10,1000,20);\n      gradient.addColorStop(0, 'pink');\n      gradient.addColorStop(1, 'orange');\n\n      stocks.map(( s, i ) => {\n        const data = []\n        s.chart.map( c => data.push( c.close ))\n        chartData.datasets.push({\n           label: s.company.companyName,\n           fill: true,\n           lineTension: 0.1,\n           backgroundColor: gradient,\n           borderColor: chartColors[i],\n           borderCapStyle: 'butt',\n           borderDash: [],\n           borderDashOffset: 0.0,\n           borderJoinStyle: 'miter',\n           pointBorderColor: chartColors[i],\n           pointBackgroundColor: '#fff',\n           pointBorderWidth: 1,\n           pointHoverRadius: 5,\n           pointHoverBackgroundColor: chartColors[i],\n           pointHoverBorderColor: chartColors[i],\n           pointHoverBorderWidth: 2,\n           pointRadius: 1,\n           pointHitRadius: 10,\n           data: data,\n        })\n      })\n\n    return chartData\n}\n    // if ( chartFilter === 'total' ) {\n    // chartOptions.tooltips.callbacks.label = tooltipItem => '$' + tooltipItem.yLabel.toLocaleString()\n    // chartOptions.scales.yAxes[0].ticks.callback = value => '$' + value.toLocaleString()\n    // chartData.datasets[0].data = Object.values( chartDataArray ).map( i => i.toFixed( 2 ))\n\n  }\n\n  calculateDebtToEquity = stock => {\n    if ( stock.financials.financials ) {\n      const shareholderEquity = stock.financials.financials[0].shareholderEquity\n      const totalDebt = stock.financials.financials[0].totalDebt\n      const debtToEquity = ( totalDebt / shareholderEquity ).toFixed( 2 )\n      return `${ debtToEquity }%`\n    }\n    else {\n      return 'N/A'\n    }\n  }\n\n  calculateAssetTurnover = stock => {\n    if ( stock.financials.financials ) {\n      const totalAssetsThisQuarter = stock.financials.financials[0].totalAssets\n      const totalAssetsLastQuarter = stock.financials.financials[1].totalAssets\n\n      const averageTotalAssets = ( totalAssetsThisQuarter + totalAssetsLastQuarter ) / 2\n      const assetTurnover = stock.financials.financials[0].totalRevenue / averageTotalAssets\n      return `${ assetTurnover.toFixed( 2 ) }%`\n    }\n    else {\n      return 'N/A'\n    }\n  }\n\n  calculatePayoutRatio = stock => {\n    if ( stock.earnings.earnings ) {\n      const EPS = stock.earnings.earnings && stock.earnings.earnings.reduce(( accumulator, currentValue ) => accumulator + currentValue.actualEPS, 0 )\n      const dividendRate = stock.stats.dividendRate\n\n      const payoutRatio = Math.floor( ( ( dividendRate / EPS ) * 100 ) * 100 ) / 100\n\n      return `${ payoutRatio }%`\n    }\n    else {\n      return 'N/A'\n    }\n  }\n\n  setSymbol = ( index, e, clickedItem ) => {\n    let selected\n    if ( clickedItem === \"input\" ) {\n      selected = e.target.value.toUpperCase()\n      setTimeout( () => {\n        ( async () => {\n          const res = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${ selected }&apikey=KT28GNBJ2ECP4SJ1`)\n          const data = await res.json()\n          this.setState({ [`matches${index}`]: data['bestMatches'] })\n        })()\n      }, 500)\n    }\n    else {\n      selected = e\n      this.setState({ [`matches${index}`]: null })\n    }\n    const symbolList = [...this.state.symbolList]\n    symbolList[index] = selected\n    this.setState({ symbolList })\n  }\n\n  clearMatches = i => {\n    setTimeout( () => {\n      this.setState({ [`matches${ i }`]: null })\n    }, 100 )\n  }\n\n  submit = () => {\n    ( async () => {\n      const { symbolList } = this.state\n      if ( symbolList.length > 0 ) {\n        const removeFromList = [undefined, null]\n        const filteredList = symbolList.filter( i => !removeFromList.includes( i ))\n        this.setState({ symbolList: filteredList })\n\n        const res = await fetch(`https://api.iextrading.com/1.0/stock/market/batch?symbols=${ filteredList.join(\",\")}&types=quote,stats,financials,company,earnings,chart&range=3m`)\n        const data = await res.json()\n        const stocks = []\n        const array = Object.keys( data ).map( d => stocks.push( data[d] ))\n        if ( stocks.length > 0 ) {\n          // const chartItemVisible = []\n          // stocks.map( ( s, i ) => chartItemVisible.push( false ) )\n          this.setState({ stocks, line0: true, line1: true, line2: true, line3: true })\n        //  this.buildChartData( stocks )\n        }\n      }\n    })()\n  }\n\n  renderInputFields = () => {\n    const { symbolList } = this.state\n\n    return Array.from( new Array( 4 ), (val, i ) => {\n      return (\n        <Th left={ true } key={ i }>\n          <DropdownContainer>\n            <input className=\"input\" type=\"text\" placeholder=\"Enter stock symbol\" value={ symbolList[i] || '' } onChange={ e => this.setSymbol( i, e, 'input' )} onBlur={ () => this.clearMatches( i ) }/>\n            { this.state[`matches${ i }`] &&\n              <Dropdown>\n                { this.state[`matches${ i }`].map( m =>\n                  <div className=\"match\" onClick={ e => this.setSymbol( i, m['1. symbol'], 'dropdown' )}>\n                    <p className=\"symbol\">{ m['1. symbol']}</p>\n                    <p className=\"company-name\">{ m['2. name'] }</p>\n                  </div>\n                )}\n              </Dropdown>\n            }\n          </DropdownContainer>\n        </Th>\n      )\n    })\n  }\n\n  toggleLine = i => {\n    //    console.log( this.state[`line${ i }`], 'the toggled state')\n    // this.setState( prevState => ({ [`line${ i }`]: !prevState[`line${ i }`] }) )\n    //\n    // console.log( this.state[`line${ i }`], 'the toggled state')\n    this.refs.chart.chartInstance.getDatasetMeta( i ).hidden = this.state[`line${ i }`]\n    this.setState( prevState => ({ [`line${ i }`]: !prevState[`line${ i }`] }) )\n    this.refs.chart.chartInstance.update()\n  }\n\n  renderLegend = () => {\n    const { stocks } = this.state\n    return stocks.length && stocks.map( ( s, i ) =>\n      <LegendItemContainer onClick={ () => this.toggleLine( i ) }>\n        <Bullet color={ chartColors[i] }/>\n        <LegendName>{ s.company.companyName }</LegendName>\n      </LegendItemContainer>\n    )\n  }\n\n  getValue = value => {\n    if ( typeof( value ) === \"string\" ) {\n      return value\n    }\n    else if ( value === 0 ) {\n      return 0\n    }\n    else if ( typeof( value ) === \"number\" ) {\n      //return Math.floor( value * 100 ) / 100\n      return value.toFixed(2)\n    }\n    else if ( value === null || value === undefined ) {\n      return 'N/A'\n    }\n    else {\n      return value\n    }\n  }\n\n  getCalculatedValues = functionName => {\n    const { stocks } = this.state\n    if ( stocks.length ) {\n      switch ( functionName ) {\n        case 'calculatePayoutRatio':\n          return (\n            stocks.map( s => <Th key={ s.company.companyName }>{ this.calculatePayoutRatio( s ) }</Th> )\n          )\n          break\n        case 'calculateDebtToEquity':\n          return (\n            stocks.map( s => <Th key={ s.company.companyName }>{ this.calculateDebtToEquity( s )}</Th> )\n          )\n          break\n        case 'calculateAssetTurnover':\n          return (\n            stocks.map( s => <Th key={ s.company.companyName }>{ this.calculateAssetTurnover( s )}</Th> )\n          )\n          break\n        default:\n          return\n      }\n    }\n    else {\n      return <Th colSpan=\"4\"/>\n    }\n  }\n\n  renderCalculatedRow = ( title, functionName ) => {\n    const { stocks } = this.state\n\n    return (\n      <Tr>\n        <Th left={ true }>{ title }</Th>\n        { this.getCalculatedValues( functionName ) }\n        { stocks.length < 4 && <Th colSpan={ 4 - stocks.length }/> }\n      </Tr>\n    )\n  }\n\n  renderTableRow = ( title, category, subcategory, isDollar, isPercent ) => {\n    const { stocks } = this.state\n\n    return (\n      <Tr>\n        <Th left={ true }>{ title }</Th>\n        { stocks.length ?\n          stocks.map( s =>\n            <Th key={ s.company.companyName }>\n              { isDollar && s[category][subcategory] !== null && '$' }\n              { this.getValue( s[category][subcategory] ) }\n              { isPercent && s[category][subcategory] !== null && '%'}\n            </Th> )\n            :\n            <Th colSpan=\"4\"/>\n        }\n        { stocks.length < 4 && <Th colSpan={ 4 - stocks.length }/> }\n      </Tr>\n    )\n  }\n\n  render() {\n    const {\n      stocks,\n      chartData,\n      chartOptions,\n    } = this.state\n\n    const tableHeaders = [\n      'Name',\n      'PEG',//\n      'Price To Earning (P/E)',\n      'Price to Sales (P/S)',\n      'Price to Book (P/B)',\n      'Dividend Yield',\n      'Dividend Payout',\n      'Return On Assets',\n      'Return On Equity',\n      'Profit Margin',\n      'Current Ratio', //\n      'Quick Ratio', //\n      'Debt to Equity',\n      'Interest Coverage',//\n      'Asset Turnover',//\n      'Inventory Turnover',//\n    ]\n    // still need: PEG, current ratio, quick ratio, intereset coverage, asset turnover, inventory turnover\n\n    return (\n      <OuterContainer>\n        <Meta />\n        <InnerContainer>\n          <Table>\n            <tbody>\n              <Tr>\n                <Th left={ true }> Stock Symbol </Th>\n                { this.renderInputFields() }\n                <button onClick={ () => this.submit() }> Go </button>\n              </Tr>\n              { this.renderTableRow( 'Name', 'company', 'companyName', false, false )}\n              { this.renderTableRow( 'Sector', 'company', 'sector', false, false )}\n              { this.renderTableRow( 'Industry', 'company', 'industry', false, false )}\n              { this.renderTableRow( 'Latest Price', 'quote', 'latestPrice', true, false )}\n              { this.renderTableRow( 'Price to Earning (P/E)', 'quote', 'peRatio', false, true )}\n              { this.renderTableRow( 'Price to Sales (P/S)', 'stats', 'priceToSales', false, true )}\n              { this.renderTableRow( 'Price to Book (P/B)', 'stats', 'priceToBook', false, true )}\n              { this.renderTableRow( 'Dividend Yield', 'stats', 'dividendYield', false, true )}\n              { this.renderTableRow( 'Dividend Rate', 'stats', 'dividendRate', true, false )}\n              {/* THis is the amount receieved per year per stock (paid out quarterly)*/}\n              { this.renderCalculatedRow( 'Dividend Payout Ratio', 'calculatePayoutRatio' )}\n              { this.renderTableRow( 'Return On Assets', 'stats', 'returnOnAssets', false, true )}\n              { this.renderTableRow( 'Return On Equity', 'stats', 'returnOnEquity', false, true )}\n              { this.renderTableRow( 'Profit Margin', 'stats', 'profitMargin', false, true )}\n              { this.renderCalculatedRow( 'Debt to Equity', 'calculateDebtToEquity' )}\n              { this.renderCalculatedRow( 'Asset Turnover (Current Quarter)', 'calculateAssetTurnover' )}\n            </tbody>\n          </Table>\n          <ChartContainer>\n            <ChartLegend>{ this.renderLegend() }</ChartLegend>\n            { stocks.length  && <Line ref=\"chart\" data={ this.chartData } options={ chartOptions } redraw={ false }/> }\n          </ChartContainer>\n        </InnerContainer>\n      </OuterContainer>\n    )\n  }\n}\n\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAFA;AADA;AANA;AAaA;AACA;AADA;AAvBA;AA4BA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAGA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAgCA;AAAA;AAAA;AAAA;AACA;AAMA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AA2BA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA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","sourceRoot":""}