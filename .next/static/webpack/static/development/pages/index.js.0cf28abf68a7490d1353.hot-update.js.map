{"version":3,"file":"static/webpack/static/development/pages/index.js.0cf28abf68a7490d1353.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport fetch from 'isomorphic-unfetch'\nimport cheerio from 'cheerio'\nconst url = 'https://www.gurufocus.com/term/peg/AAPL/PEG-Ratio'\nvar proxyUrl = 'https://cors-anywhere.herokuapp.com/'\nimport { Line } from 'react-chartjs-2'\n//<Line data={ chartData } options={ chartOptions } />\n\nconst chartData = {\n  labels: [],\n  datasets: [\n    {\n      label: '',\n      backgroundColor: '#ff624d82',\n      borderColor: '#ff624d',\n      borderWidth: 2,\n      data: [],\n      hoverBackgroundColor: '#ff624d',\n    },\n    {\n      label: '',\n      backgroundColor: '#ff624d82',\n      borderColor: '#ff624d',\n      borderWidth: 2,\n      data: [],\n      hoverBackgroundColor: '#ff624d',\n    },\n  ],\n}\n\nconst chartOptions = {\n  maintainAspectRatio: false,\n  elements: {\n    line: {\n      tension: 0.1,\n    },\n  },\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {\n        display: false,\n      },\n    }],\n    yAxes: [{\n      ticks: {\n        maxTicksLimit: 5,\n        beginAtZero: true,\n      },\n    }],\n  },\n  tooltips: {\n    callbacks: {},\n  },\n}\n\n\n\nconst HeroTitle = styled.h1`\n  color:red;\n  position: relative;\n  z-index: 1;\n  text-transform: uppercase;\n  font-size: 100px;\n  margin-bottom: -10px;\n  font-family: 'Anton', sans-serif;\n  text-shadow: -3px 0px 11px rgba(0,0,0,0.7);\n`\n\n\nclass Index extends Component {\n  state = {\n    stocks: {}\n  }\n\n  componentWillMount() {\n    ( async () => {\n      const res = await fetch('https://api.iextrading.com/1.0/stock/market/batch?symbols=aapl,msft&types=quote,stats,financials,company,earnings,chart&range=3m')\n      const data = await res.json()\n      const stocks = []\n      const array = Object.keys( data ).map( d => stocks.push( data[d] ))\n      this.setState({ stocks })\n      this.buildChartData( stocks )\n    })()\n\n    fetch( proxyUrl + url )\n      .then( res => res.text() )\n      .then( (body ) => {\n        // comp_name\n        const test = cheerio.load(body)\n        console.log(test('.comp_name font').text(), 'the test')\n        // test('.comp_name font').each(( index, element ) => {\n        //   console.log(element, 'the index')\n        // })\n      })\n  }\n\n  buildChartData = stocks => {\n    console.log(stocks, 'the stocks')\n    const labels = []\n    stocks[0].chart.map( c => labels.push( c.date ))\n    chartData.labels = labels\n    stocks.map(( s, i ) => {\n      const data = []\n      s.chart.map( c => data.push( c.close ))\n      console.log(data, 'the data')\n      chartData.datasets[i].data = data\n    })\n\n    // chartData.datasets[0].data = totals\n  }\n\n  calculateDebtToEquity = stock => {\n    const shareholderEquity = stock.financials.financials[0].shareholderEquity\n    const totalDebt = stock.financials.financials[0].totalDebt\n    const debtToEquity = ( totalDebt / shareholderEquity ).toFixed( 2 )\n    return debtToEquity\n  }\n\n  calculateAssetTurnover = stock => {\n    const totalAssetsThisQuarter = stock.financials.financials[0].totalAssets\n    const totalAssetsLastQuarter = stock.financials.financials[1].totalAssets\n\n    const averageTotalAssets = ( totalAssetsThisQuarter + totalAssetsLastQuarter ) / 2\n    const assetTurnover = stock.financials.financials[0].totalRevenue / averageTotalAssets\n    return assetTurnover.toFixed( 2 )\n  }\n\n  calculatePayoutRatio = stock => {\n    const EPS = stock.earnings.earnings.reduce(( accumulator, currentValue ) => accumulator + currentValue.actualEPS, 0 )\n    const dividendRate = stock.stats.dividendRate\n\n    const payoutRatio = Math.floor( ( ( dividendRate / EPS ) * 100 ) * 100 ) / 100\n\n    return payoutRatio\n  }\n\n  render() {\n    const {\n      stocks\n    } = this.state\n\n    const tableHeaders = [\n      'Name',\n      'PEG',//\n      'Price To Earning (P/E)',\n      'Price to Sales (P/S)',\n      'Price to Book (P/B)',\n      'Dividend Yield',\n      'Dividend Payout',\n      'Return On Assets',\n      'Return On Equity',\n      'Profit Margin',\n      'Current Ratio', //\n      'Quick Ratio', //\n      'Debt to Equity',\n      'Interest Coverage',//\n      'Asset Turnover',//\n      'Inventory Turnover',//\n    ]\n    // still need: PEG, current ratio, quick ratio, intereset coverage, asset turnover, inventory turnover\n\n    return (\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <th> Name </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.company.companyName }</th> ) }\n            </tr>\n            <tr>\n              <th> Sector </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.company.sector }</th> ) }\n            </tr>\n            <tr>\n              <th> Industry </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.company.industry }</th> ) }\n            </tr>\n            <tr>\n              <th> Latest Price </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>${ s.quote.latestPrice }</th> ) }\n            </tr>\n            <tr>\n              <th> Price to Earning (P/E) </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.quote.peRatio }</th> ) }\n            </tr>\n            <tr>\n              <th> Price to Sales (P/S) </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.stats.priceToSales.toFixed( 2 ) }</th> ) }\n            </tr>\n            <tr>\n              <th> Price to Book (P/B) </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.stats.priceToBook }</th> ) }\n            </tr>\n            <tr>\n              <th> Dividend Yield </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.stats.dividendYield.toFixed( 2 ) }%</th> ) }\n            </tr>\n            <tr>\n              <th> Dividend Rate </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>${ s.stats.dividendRate.toFixed( 2 ) }</th> ) }\n              {/* THis is the amount receieved per year per stock (paid out quarterly)*/}\n            </tr>\n            <tr>\n              <th> Dividend Payout Ratio </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ this.calculatePayoutRatio( s )}%</th> ) }\n              {/* search company payout ratio */}\n            </tr>\n            <tr>\n              <th> Return On Assets </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.stats.returnOnAssets }%</th> ) }\n              {/* search company payout ratio */}\n            </tr>\n            <tr>\n              <th> Return On Equity </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.stats.returnOnEquity }%</th> ) }\n              {/* search company payout ratio */}\n            </tr>\n            <tr>\n              <th> Profit Margin </th>\n              { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ s.stats.profitMargin }%</th> ) }\n              {/* search company payout ratio */}\n            </tr>\n            <tr>\n              <th> Debt to Equity </th>\n                { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ this.calculateDebtToEquity( s )}%</th> ) }\n              {/* search company payout ratio */}\n            </tr>\n            <tr>\n              <th> Asset Turnover (Current Quarter)</th>\n                { stocks.length && stocks.map( s => <th key={ s.company.companyName }>{ this.calculateAssetTurnover( s )}%</th> ) }\n              {/* search company payout ratio */}\n            </tr>\n          </tbody>\n        </table>\n        <Line data={ chartData } options={ chartOptions } redraw={ true }/>\n      </div>\n    )\n  }\n}\n\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAXA;AAsBA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AAFA;AADA;AANA;AAaA;AACA;AADA;AAvBA;AA8BA;AAAA;AAAA;AAAA;AACA;AAWA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAyBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;;;;;;AA7DA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AA0CA;AAAA;AACA;AADA;AAKA;AAGA;AASA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AAxKA;AACA;AA2KA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}